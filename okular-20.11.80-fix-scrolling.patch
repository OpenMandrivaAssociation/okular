diff -up okular-21.03.80/part/pageview.cpp.1~ okular-21.03.80/part/pageview.cpp
--- okular-21.03.80/part/pageview.cpp.1~	2021-03-17 23:28:50.000000000 +0100
+++ okular-21.03.80/part/pageview.cpp	2021-03-22 14:20:02.712578126 +0100
@@ -39,8 +39,6 @@
 #include <QMimeDatabase>
 #include <QPainter>
 #include <QScrollBar>
-#include <QScroller>
-#include <QScrollerProperties>
 #include <QSet>
 #include <QTimer>
 #include <QToolTip>
@@ -152,7 +150,7 @@ public:
     // view layout (columns and continuous in Settings), zoom and mouse
     PageView::ZoomMode zoomMode;
     float zoomFactor;
-    QPoint mouseGrabOffset;
+    QPoint mouseGrabPos;
     QPoint mousePressPos;
     QPoint mouseSelectPos;
     QPoint previousMouseMovePos;
@@ -172,9 +170,15 @@ public:
     QList<TableSelectionPart> tableSelectionParts;
     bool tableDividersGuessed;
 
+    // viewport move
+    bool viewportMoveActive;
+    QElapsedTimer viewportMoveTime;
+    QPoint viewportMoveDest;
+
     int lastSourceLocationViewportPageNumber;
     double lastSourceLocationViewportNormalizedX;
     double lastSourceLocationViewportNormalizedY;
+    QTimer *viewportMoveTimer;
     int controlWheelAccumulatedDelta;
 
     // for everything except PgUp/PgDn and scroll to arbitrary locations
@@ -261,8 +265,6 @@ public:
 
     // Keep track of mouse over link object
     const Okular::ObjectRect *mouseOverLinkObject;
-
-    QScroller *scroller;
 };
 
 PageViewPrivate::PageViewPrivate(PageView *qq)
@@ -338,6 +340,7 @@ PageView::PageView(QWidget *parent, Okul
     d->lastSourceLocationViewportPageNumber = -1;
     d->lastSourceLocationViewportNormalizedX = 0.0;
     d->lastSourceLocationViewportNormalizedY = 0.0;
+    d->viewportMoveTimer = nullptr;
     d->controlWheelAccumulatedDelta = 0;
     d->currentShortScrollDuration = d->baseShortScrollDuration;
     d->currentLongScrollDuration = d->baseLongScrollDuration;
@@ -426,19 +429,6 @@ PageView::PageView(QWidget *parent, Okul
     viewport()->setMouseTracking(true);
     viewport()->setAutoFillBackground(false);
 
-    d->scroller = QScroller::scroller(viewport());
-
-    QScrollerProperties prop;
-    prop.setScrollMetric(QScrollerProperties::DecelerationFactor, 0.3);
-    prop.setScrollMetric(QScrollerProperties::MaximumVelocity, 1);
-    prop.setScrollMetric(QScrollerProperties::AcceleratingFlickMaximumTime, 0.2); // Workaround for QTBUG-88249 (non-flick gestures recognized as accelerating flick)
-    prop.setScrollMetric(QScrollerProperties::HorizontalOvershootPolicy, QScrollerProperties::OvershootAlwaysOff);
-    prop.setScrollMetric(QScrollerProperties::VerticalOvershootPolicy, QScrollerProperties::OvershootAlwaysOff);
-    prop.setScrollMetric(QScrollerProperties::DragStartDistance, 0.0);
-    d->scroller->setScrollerProperties(prop);
-
-    connect(d->scroller, &QScroller::stateChanged, this, &PageView::slotRequestVisiblePixmaps);
-
     // the apparently "magic" value of 20 is the same used internally in QScrollArea
     verticalScrollBar()->setCursor(Qt::ArrowCursor);
     verticalScrollBar()->setSingleStep(20);
@@ -458,17 +448,6 @@ PageView::PageView(QWidget *parent, Okul
     connect(horizontalScrollBar(), &QAbstractSlider::valueChanged, this, &PageView::slotRequestVisiblePixmaps);
     connect(verticalScrollBar(), &QAbstractSlider::valueChanged, this, &PageView::slotRequestVisiblePixmaps);
 
-    // Keep the scroller in sync with user input on the scrollbars.
-    // QAbstractSlider::sliderMoved() and sliderReleased are the intuitive signals,
-    // but are only emitted when the “slider is down”, i. e. not when the user scrolls on the scrollbar.
-    // QAbstractSlider::actionTriggered() is emitted in all user input cases,
-    // but before the value() changes, so we need queued connection here.
-    auto update_scroller = [=]() {
-        d->scroller->scrollTo(QPoint(horizontalScrollBar()->value(), verticalScrollBar()->value()), 0); // sync scroller with scrollbar
-    };
-    connect(verticalScrollBar(), &QAbstractSlider::actionTriggered, this, update_scroller, Qt::QueuedConnection);
-    connect(horizontalScrollBar(), &QAbstractSlider::actionTriggered, this, update_scroller, Qt::QueuedConnection);
-
     connect(&d->dragScrollTimer, &QTimer::timeout, this, &PageView::slotDragScroll);
 
     d->leftClickTimer.setSingleShot(true);
@@ -1393,8 +1372,23 @@ void PageView::slotRealNotifyViewportCha
     // restore viewport center or use default {x-center,v-top} alignment
     const QPoint centerCoord = viewportToContentArea(vp);
 
-    // if smooth movement requested, setup parameters and start it
-    center(centerCoord.x(), centerCoord.y(), smoothMove);
+    if ( smoothMove )
+    {
+        d->viewportMoveActive = true;
+        d->viewportMoveTime.start();
+        d->viewportMoveDest.setX( centerCoord.x() );
+        d->viewportMoveDest.setY( centerCoord.y() );
+        if ( !d->viewportMoveTimer )
+        {
+            d->viewportMoveTimer = new QTimer( this );
+            connect( d->viewportMoveTimer, &QTimer::timeout,
+                     this, &PageView::slotMoveViewport );
+        }
+        d->viewportMoveTimer->start( 25 );
+        verticalScrollBar()->setEnabled( false );
+        horizontalScrollBar()->setEnabled( false );
+    } else
+        center(centerCoord.x(), centerCoord.y());
 
     d->blockPixmapsRequest = false;
 
@@ -1983,11 +1977,15 @@ void PageView::keyPressEvent(QKeyEvent *
     if ((d->mouseSelecting && e->key() != Qt::Key_Escape) || (QApplication::mouseButtons() & Qt::MiddleButton))
         return;
 
+    // if viewport is moving, disable keys handling
+    if ( d->viewportMoveActive )
+        return;
+
     // move/scroll page by using keys
     switch (e->key()) {
     case Qt::Key_J:
     case Qt::Key_Down:
-        slotScrollDown(1 /* go down 1 step */);
+        slotScrollDown( true /* singleStep */);
         break;
 
     case Qt::Key_PageDown:
@@ -1996,7 +1994,7 @@ void PageView::keyPressEvent(QKeyEvent *
 
     case Qt::Key_K:
     case Qt::Key_Up:
-        slotScrollUp(1 /* go up 1 step */);
+        slotScrollUp( true /* singleStep */);
         break;
 
     case Qt::Key_PageUp:
@@ -2011,7 +2009,7 @@ void PageView::keyPressEvent(QKeyEvent *
             int next_page = d->document->currentPage() - viewColumns();
             d->document->setViewportPage(next_page);
         } else {
-            d->scroller->scrollTo(d->scroller->finalPosition() + QPoint(-horizontalScrollBar()->singleStep(), 0), d->currentShortScrollDuration);
+            horizontalScrollBar()->triggerAction( QScrollBar::SliderSingleStepSub );
         }
         break;
     case Qt::Key_Right:
@@ -2021,7 +2019,7 @@ void PageView::keyPressEvent(QKeyEvent *
             int next_page = d->document->currentPage() + viewColumns();
             d->document->setViewportPage(next_page);
         } else {
-            d->scroller->scrollTo(d->scroller->finalPosition() + QPoint(horizontalScrollBar()->singleStep(), 0), d->currentShortScrollDuration);
+            horizontalScrollBar()->triggerAction( QScrollBar::SliderSingleStepAdd );
         }
         break;
     case Qt::Key_Escape:
@@ -2127,6 +2125,10 @@ void PageView::mouseMoveEvent(QMouseEven
     if (d->items.isEmpty())
         return;
 
+    // don't perform any mouse action when viewport is autoscrolling
+    if ( d->viewportMoveActive )
+        return;
+
     // if holding mouse mid button, perform zoom
     if (e->buttons() & Qt::MiddleButton) {
         int mouseY = e->globalPos().y();
@@ -2186,33 +2188,37 @@ void PageView::mouseMoveEvent(QMouseEven
                 d->mouseAnnotation->routeMouseMoveEvent(pageItem, eventPos, leftButton);
             }
             // drag page
-            else {
-                if (d->scroller->state() == QScroller::Inactive || d->scroller->state() == QScroller::Scrolling) {
-                    d->mouseGrabOffset = QPoint(0, 0);
-                    d->scroller->handleInput(QScroller::InputPress, e->pos(), e->timestamp() - 1);
-                }
-
+            else if ( !d->mouseGrabPos.isNull() ) {
                 setCursor(Qt::ClosedHandCursor);
 
                 QPoint mousePos = e->globalPos();
+		QPoint delta = d->mouseGrabPos - mousePos;
 
+		// wrap mouse from top to bottom
                 const QRect mouseContainer = QApplication::desktop()->screenGeometry(this);
 
-                // wrap mouse from top to bottom
+		// If the delta is huge it probably means we just wrapped in that direction
+		const QPoint absDelta(abs(delta.x()), abs(delta.y()));
+		if ( absDelta.y() > mouseContainer.height() / 2 )
+                    delta.setY(mouseContainer.height() - absDelta.y());
+		if ( absDelta.x() > mouseContainer.width() / 2 )
+                    delta.setX(mouseContainer.width() - absDelta.x());
+
                 if (mousePos.y() <= mouseContainer.top() + 4 && verticalScrollBar()->value() < verticalScrollBar()->maximum() - 10) {
                     mousePos.setY(mouseContainer.bottom() - 5);
                     QCursor::setPos(mousePos);
-                    d->mouseGrabOffset -= QPoint(0, mouseContainer.height());
                 }
                 // wrap mouse from bottom to top
                 else if (mousePos.y() >= mouseContainer.bottom() - 4 && verticalScrollBar()->value() > 10) {
                     mousePos.setY(mouseContainer.top() + 5);
-                    d->mouseGrabOffset += QPoint(0, mouseContainer.height());
 
                     QCursor::setPos(mousePos);
                 }
+		// remember last position
+		d->mouseGrabPos = mousePos;
 
-                d->scroller->handleInput(QScroller::InputMove, e->pos() + d->mouseGrabOffset, e->timestamp());
+		// scroll page by position increment
+		scrollTo( horizontalScrollBar()->value() + delta.x(), verticalScrollBar()->value() + delta.y() );
             }
         } else if (rightButton && !d->mousePressPos.isNull() && d->aMouseSelect) {
             // if mouse moves 5 px away from the press point, switch to 'selection'
@@ -2272,7 +2278,7 @@ void PageView::mousePressEvent(QMouseEve
         return;
 
     // if performing a selection or dyn zooming, disable mouse press
-    if (d->mouseSelecting || (e->button() != Qt::MiddleButton && (e->buttons() & Qt::MiddleButton)))
+    if (d->mouseSelecting || (e->button() != Qt::MiddleButton && (e->buttons() & Qt::MiddleButton)) || d->viewportMoveActive )
         return;
 
     // if the page is scrolling, stop it
@@ -2292,7 +2298,6 @@ void PageView::mousePressEvent(QMouseEve
 
     // if we're editing an annotation, dispatch event to it
     if (d->annotator && d->annotator->active()) {
-        d->scroller->stop();
         PageViewItem *pageItem = pickItemOnPoint(eventPos.x(), eventPos.y());
         d->annotator->routeMouseEvent(e, pageItem);
         return;
@@ -2327,9 +2332,8 @@ void PageView::mousePressEvent(QMouseEve
                 d->mouseAnnotation->routeMousePressEvent(pageItem, eventPos);
             }
 
+	    d->mouseGrabPos = d->mouseOnRect ? QPoint() : d->mousePressPos;
             if (!d->mouseOnRect) {
-                d->mouseGrabOffset = QPoint(0, 0);
-                d->scroller->handleInput(QScroller::InputPress, e->pos(), e->timestamp());
                 d->leftClickTimer.start(QApplication::doubleClickInterval() + 10);
             }
         }
@@ -2479,6 +2483,10 @@ void PageView::mouseReleaseEvent(QMouseE
         return;
     }
 
+    // don't perform any mouse action when viewport is autoscrolling
+    if ( d->viewportMoveActive )
+        return;
+
     const QPoint eventPos = contentAreaPoint(e->pos());
 
     // handle mode independent mid bottom zoom
@@ -2499,7 +2507,6 @@ void PageView::mouseReleaseEvent(QMouseE
 
     switch (d->mouseMode) {
     case Okular::Settings::EnumMouseMode::Browse: {
-        d->scroller->handleInput(QScroller::InputRelease, e->pos() + d->mouseGrabOffset, e->timestamp());
 
         // return the cursor to its normal state after dragging
         if (cursor().shape() == Qt::ClosedHandCursor)
@@ -3133,6 +3140,10 @@ void PageView::mouseDoubleClickEvent(QMo
 
 void PageView::wheelEvent(QWheelEvent *e)
 {
+    // don't perform any mouse action when viewport is autoscrolling
+    if ( d->viewportMoveActive )
+        return;
+
     if (!d->document->isOpened()) {
         QAbstractScrollArea::wheelEvent(e);
         return;
@@ -3163,7 +3174,6 @@ void PageView::wheelEvent(QWheelEvent *e
                 newViewport.rePos.enabled = true;
                 newViewport.rePos.normalizedY = 0.0;
                 d->document->setViewport(newViewport);
-                d->scroller->scrollTo(QPoint(horizontalScrollBar()->value(), verticalScrollBar()->value()), 0); // sync scroller with scrollbar
             }
         } else if (delta >= QWheelEvent::DefaultDeltasPerStep && !Okular::Settings::viewContinuous() && vScroll == verticalScrollBar()->minimum()) {
             // go to prev page
@@ -3176,23 +3186,9 @@ void PageView::wheelEvent(QWheelEvent *e
                 newViewport.rePos.enabled = true;
                 newViewport.rePos.normalizedY = 1.0;
                 d->document->setViewport(newViewport);
-                d->scroller->scrollTo(QPoint(horizontalScrollBar()->value(), verticalScrollBar()->value()), 0); // sync scroller with scrollbar
             }
         } else {
-            // When the shift key is held down, scroll ten times faster
-            int multiplier = e->modifiers() & Qt::ShiftModifier ? 10 : 1;
-
-            if (delta != 0 && delta % QWheelEvent::DefaultDeltasPerStep == 0) {
-                // number of scroll wheel steps Qt gives to us at the same time
-                int count = abs(delta / QWheelEvent::DefaultDeltasPerStep) * multiplier;
-                if (delta < 0) {
-                    slotScrollDown(count);
-                } else {
-                    slotScrollUp(count);
-                }
-            } else {
-                d->scroller->scrollTo(d->scroller->finalPosition() - e->angleDelta() * multiplier / 4.0, 0);
-            }
+            QAbstractScrollArea::wheelEvent( e );
         }
     }
 }
@@ -3919,15 +3915,12 @@ void PageView::updateCursor(const QPoint
 
     // detect the underlaying page (if present)
     PageViewItem *pageItem = pickItemOnPoint(p.x(), p.y());
-    QScroller::State scrollerState = d->scroller->state();
 
     if (d->annotator && d->annotator->active()) {
         if (pageItem || d->annotator->annotating())
             setCursor(d->annotator->cursor());
         else
             setCursor(Qt::ForbiddenCursor);
-    } else if (scrollerState == QScroller::Pressed || scrollerState == QScroller::Dragging) {
-        setCursor(Qt::ClosedHandCursor);
     } else if (pageItem) {
         double nX = pageItem->absToPageX(p.x());
         double nY = pageItem->absToPageY(p.y());
@@ -4059,12 +4052,12 @@ int PageView::viewColumns() const
         return Okular::Settings::viewColumns();
 }
 
-void PageView::center(int cx, int cy, bool smoothMove)
+void PageView::center(int cx, int cy)
 {
-    scrollTo(cx - viewport()->width() / 2, cy - viewport()->height() / 2, smoothMove);
+    scrollTo(cx - viewport()->width() / 2, cy - viewport()->height() / 2);
 }
 
-void PageView::scrollTo(int x, int y, bool smoothMove)
+void PageView::scrollTo(int x, int y)
 {
 #if QT_VERSION < QT_VERSION_CHECK(5, 14, 0)
     // Workaround for QTBUG-88288, (KDE bug 425188): To avoid a crash in QScroller,
@@ -4089,10 +4082,8 @@ void PageView::scrollTo(int x, int y, bo
 
     d->blockPixmapsRequest = true;
 
-    if (smoothMove)
-        d->scroller->scrollTo(QPoint(x, y), d->currentLongScrollDuration);
-    else
-        d->scroller->scrollTo(QPoint(x, y), 0);
+    horizontalScrollBar()->setValue( x );
+    verticalScrollBar()->setValue( y );
 
     d->blockPixmapsRequest = prevState;
 
@@ -4261,6 +4252,16 @@ void PageView::slotRelayoutPages()
         return;
     }
 
+    // if viewport was auto-moving, stop it
+    if ( d->viewportMoveActive )
+    {
+        center( d->viewportMoveDest.x(), d->viewportMoveDest.y() );
+	d->viewportMoveActive = false;
+	if(d->viewportMoveTimer) d->viewportMoveTimer->stop();
+	verticalScrollBar()->setEnabled( true );
+	horizontalScrollBar()->setEnabled( true );
+    }
+
     int viewportWidth = viewport()->width(), viewportHeight = viewport()->height(), fullWidth = 0, fullHeight = 0;
 
     // handle the 'center first page in row' stuff
@@ -4455,7 +4456,7 @@ static void slotRequestPreloadPixmap(Pag
 void PageView::slotRequestVisiblePixmaps(int newValue)
 {
     // if requests are blocked (because raised by an unwanted event), exit
-    if (d->blockPixmapsRequest)
+    if (d->blockPixmapsRequest || d->viewportMoveActive)
         return;
 
     // precalc view limits for intersecting with page coords inside the loop
@@ -4599,11 +4600,37 @@ void PageView::slotRequestVisiblePixmaps
         newViewport.rePos.normalizedY = focusedY;
         // set the viewport to other observers
         // do not update history if the viewport is autoscrolling
-        d->document->setViewportWithHistory(newViewport, this, false, d->scroller->state() != QScroller::Scrolling);
+        d->document->setViewportWithHistory(newViewport, this, false, true);
     }
     d->document->setVisiblePageRects(visibleRects, this);
 }
 
+void PageView::slotMoveViewport()
+{
+    // converge to viewportMoveDest in 1 second
+    int diffTime = d->viewportMoveTime.elapsed();
+    if ( diffTime >= 667 || !d->viewportMoveActive )
+    {
+        center( d->viewportMoveDest.x(), d->viewportMoveDest.y() );
+        if(d->viewportMoveTimer) d->viewportMoveTimer->stop();
+        d->viewportMoveActive = false;
+        slotRequestVisiblePixmaps();
+        verticalScrollBar()->setEnabled( true );
+        horizontalScrollBar()->setEnabled( true );
+        return;
+    }
+
+    // move the viewport smoothly (kmplot: p(x)=1+0.47*(x-1)^3-0.25*(x-1)^4)
+    float convergeSpeed = (float)diffTime / 667.0,
+          x = ((float)viewport()->width() / 2.0) + horizontalScrollBar()->value(),
+          y = ((float)viewport()->height() / 2.0) + verticalScrollBar()->value(),
+          diffX = (float)d->viewportMoveDest.x() - x,
+          diffY = (float)d->viewportMoveDest.y() - y;
+    convergeSpeed *= convergeSpeed * (1.4 - convergeSpeed);
+    center( (int)(x + diffX * convergeSpeed),
+            (int)(y + diffY * convergeSpeed ) );
+}
+
 void PageView::slotAutoScroll()
 {
     // the first time create the timer
@@ -4625,7 +4652,7 @@ void PageView::slotAutoScroll()
     const int scrollOffset[10] = {1, 1, 1, 1, 1, 2, 2, 2, 4, 4};
     d->autoScrollTimer->start(scrollDelay[index]);
     int delta = d->scrollIncrement > 0 ? scrollOffset[index] : -scrollOffset[index];
-    d->scroller->scrollTo(d->scroller->finalPosition() + QPoint(0, delta), scrollDelay[index]);
+    verticalScrollBar()->setValue(verticalScrollBar()->value() + delta);
 }
 
 void PageView::slotDragScroll()
@@ -4842,16 +4869,14 @@ void PageView::slotAutoScrollDown()
     setFocus();
 }
 
-void PageView::slotScrollUp(int nSteps)
+void PageView::slotScrollUp(bool singleStep)
 {
     // if in single page mode and at the top of the screen, go to \ page
     if (Okular::Settings::viewContinuous() || verticalScrollBar()->value() > verticalScrollBar()->minimum()) {
-        if (nSteps) {
-            d->scroller->scrollTo(d->scroller->finalPosition() + QPoint(0, -100 * nSteps), d->currentShortScrollDuration);
-        } else {
-            if (d->scroller->finalPosition().y() > verticalScrollBar()->minimum())
-                d->scroller->scrollTo(d->scroller->finalPosition() + QPoint(0, -(1 - Okular::Settings::scrollOverlap() / 100.0) * verticalScrollBar()->rect().height()), d->currentLongScrollDuration);
-        }
+        if (singleStep)
+            verticalScrollBar()->triggerAction( QScrollBar::SliderSingleStepSub );
+	else
+            verticalScrollBar()->triggerAction( QScrollBar::SliderPageStepSub );
     } else if (d->document->currentPage() > 0) {
         // more optimized than document->setPrevPage and then move view to bottom
         Okular::DocumentViewport newViewport = d->document->viewport();
@@ -4864,16 +4889,14 @@ void PageView::slotScrollUp(int nSteps)
     }
 }
 
-void PageView::slotScrollDown(int nSteps)
+void PageView::slotScrollDown(bool singleStep)
 {
     // if in single page mode and at the bottom of the screen, go to next page
     if (Okular::Settings::viewContinuous() || verticalScrollBar()->value() < verticalScrollBar()->maximum()) {
-        if (nSteps) {
-            d->scroller->scrollTo(d->scroller->finalPosition() + QPoint(0, 100 * nSteps), d->currentShortScrollDuration);
-        } else {
-            if (d->scroller->finalPosition().y() < verticalScrollBar()->maximum())
-                d->scroller->scrollTo(d->scroller->finalPosition() + QPoint(0, (1 - Okular::Settings::scrollOverlap() / 100.0) * verticalScrollBar()->rect().height()), d->currentLongScrollDuration);
-        }
+        if (singleStep)
+            verticalScrollBar()->triggerAction(QScrollBar::SliderSingleStepAdd);
+	else
+            verticalScrollBar()->triggerAction(QScrollBar::SliderPageStepAdd);
     } else if ((int)d->document->currentPage() < d->items.count() - 1) {
         // more optimized than document->setNextPage and then move view to top
         Okular::DocumentViewport newViewport = d->document->viewport();
diff -up okular-21.03.80/part/pageview.h.1~ okular-21.03.80/part/pageview.h
--- okular-21.03.80/part/pageview.h.1~	2021-03-17 23:28:50.000000000 +0100
+++ okular-21.03.80/part/pageview.h	2021-03-22 14:21:12.889719944 +0100
@@ -200,8 +200,8 @@ private:
 
     int viewColumns() const;
 
-    void center(int cx, int cy, bool smoothMove = false);
-    void scrollTo(int x, int y, bool smoothMove = false);
+    void center(int cx, int cy);
+    void scrollTo(int x, int y);
 
     void toggleFormWidgets(bool on);
 
@@ -238,6 +238,8 @@ private Q_SLOTS:
     void delayedResizeEvent();
     // activated either directly or via the contentsMoving(int,int) signal
     void slotRequestVisiblePixmaps(int newValue = -1);
+    // activated by the viewport move timer
+    void slotMoveViewport();
     // activated by the autoscroll timer (Shift+Up/Down keys)
     void slotAutoScroll();
     // activated by the dragScroll timer
@@ -271,8 +273,8 @@ private Q_SLOTS:
     void slotSignature();
     void slotAutoScrollUp();
     void slotAutoScrollDown();
-    void slotScrollUp(int nSteps = 0);
-    void slotScrollDown(int nSteps = 0);
+    void slotScrollUp(bool singleStep = false);
+    void slotScrollDown(bool singleStep = false);
     void slotRotateClockwise();
     void slotRotateCounterClockwise();
     void slotRotateOriginal();
